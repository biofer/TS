# Copyright (C) 2010 Ion Torrent Systems, Inc. All Rights Reserved
# Set a default build type for single-configuration
# CMake generators if no build type is set.
IF(NOT CMAKE_CONFIGURATION_TYPES AND NOT CMAKE_BUILD_TYPE)
   SET(CMAKE_BUILD_TYPE Release)
ENDIF()

# Common compiler flags
if ("${LSB_RELEASE_CODENAME}" STREQUAL "lucid" OR "${LSB_RELEASE_CODENAME}" STREQUAL "raring")
    set(ION_COMMON_FLAGS "${ION_COMMON_FLAGS} -Wall -Wextra -Werror -fPIC")
else()
    set(ION_COMMON_FLAGS "${ION_COMMON_FLAGS} -Wall -Wextra -fPIC")
endif()

# can be removed with 2.8.10, use CMAKE_C_COMPILER_VERSION instead
execute_process(COMMAND ${CMAKE_C_COMPILER} -dumpversion OUTPUT_VARIABLE GCC_C_VERSION)
execute_process(COMMAND ${CMAKE_CXX_COMPILER} -dumpversion OUTPUT_VARIABLE GCC_CXX_VERSION)

# http://gcc.gnu.org/onlinedocs/gcc-4.7.0/gcc/i386-and-x86_002d64-Options.html#i386-and-x86_002d64-Options
# GCC depresses SSEx instructions when -mavx is used. Instead, it generates new AVX instructions or AVX equivalence for all SSEx instructions when needed.
if ("${CMAKE_C_COMPILER_ID}" STREQUAL "GNU")
    if(GCC_C_VERSION VERSION_EQUAL 4.4 OR (GCC_C_VERSION VERSION_GREATER 4.4) AND NOT CMAKE_SSE_ONLY)
        if ("${LSB_RELEASE_CODENAME}" STREQUAL "lucid")
            set(ION_COMMON_FLAGS "${ION_COMMON_FLAGS} -msse3")
        else()
            set(ION_COMMON_FLAGS "${ION_COMMON_FLAGS} -mavx")
#            set(ION_COMMON_FLAGS "${ION_COMMON_FLAGS} -fdiagnostics-color=always") # with 4.9
        endif()
#        set(ION_COMMON_FLAGS "${ION_COMMON_FLAGS} -Wvla")
#        set(ION_COMMON_FLAGS "${ION_COMMON_FLAGS} -O3 -ftree-vectorize -ftree-vectorizer-verbose=0")
    else()
        # e.g.  CentOS release 5.9 (Final) with gcc version 4.1.2 20080704 (Red Hat 4.1.2-54)
        set(ION_COMMON_FLAGS "${ION_COMMON_FLAGS} -msse3")
    endif()
# http://software.intel.com/sites/products/documentation/doclib/stdxe/2013/composerxe/compiler/cpp-lin/index.htm
# http://software.intel.com/sites/products/documentation/doclib/stdxe/2013/composerxe/compiler/cpp-lin/GUID-B4670EED-D317-46D4-9635-618B36C827C3.htm # Code Generation Options
# If you specify both the -ax and -m options, the baseline code will execute on non-Intel processors compatible with the setting specified for the -m option.
elseif ("${CMAKE_C_COMPILER_ID}" STREQUAL "Intel")
    set(ION_COMMON_FLAGS "${ION_COMMON_FLAGS} -axAVX,SSE4.2 -msse3 -vec-report0")
else()
    set(ION_COMMON_FLAGS "${ION_COMMON_FLAGS} -msse3")
endif()

message(STATUS "C compiler: ${CMAKE_C_COMPILER_ID} ${CMAKE_C_COMPILER_VERSION}")
message(STATUS "CXX compiler: ${CMAKE_CXX_COMPILER_ID} ${CMAKE_CXX_COMPILER_VERSION}")
message(STATUS "common compiler flags: ${ION_COMMON_FLAGS}")


# Add any C specific flags here
set(ION_C_FLAGS "${ION_C_FLAGS} -Wno-sign-compare -Wno-unused-variable -Wno-unused-parameter")

if ("${CMAKE_C_COMPILER_ID}" STREQUAL "GNU")
    set(ION_C_FLAGS "${ION_C_FLAGS}") # -ansi -pedantic
    if(GCC_C_VERSION VERSION_EQUAL 4.4 OR (GCC_C_VERSION VERSION_GREATER 4.4))
        set(ION_C_FLAGS "${ION_C_FLAGS} -Wno-unused-result")
    endif()
    if(GCC_C_VERSION VERSION_EQUAL 4.6 OR (GCC_C_VERSION VERSION_GREATER 4.6))
        set(ION_C_FLAGS "${ION_C_FLAGS} -Wno-error=unused-but-set-variable")
    endif()
endif()

if ("${CMAKE_C_COMPILER_ID}" STREQUAL "Clang")
    # undefined reference to inline function`tmap_reverse_compliment', http://clang.llvm.org/compatibility.html#inline
    set(ION_C_FLAGS "${ION_C_FLAGS} -std=gnu89") # bad workaround for static-in-inline warning/error

    set(ION_C_FLAGS "${ION_C_FLAGS} -Wno-static-in-inline")
#    set(ION_C_FLAGS "${ION_C_FLAGS} -Wno-gnu")
    set(ION_C_FLAGS "${ION_C_FLAGS} -Wno-unused-function")
endif()

if ("${CMAKE_C_COMPILER_ID}" STREQUAL "Intel")
    set(ION_C_FLAGS "${ION_C_FLAGS} -wd10006") # 10006: ignoring unknown option '-Wno-unused-result'
endif()


# Add any C++ specific flags here
set(ION_CXX_FLAGS "${ION_CXX_FLAGS} -Wno-unused-parameter -Wno-write-strings")

if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
    # GNU specific flags
    set(ION_CXX_FLAGS "${ION_CXX_FLAGS} -Wno-unused-variable") # -ansi -pedantic
    if (GCC_CXX_VERSION VERSION_EQUAL 4.6 OR (GCC_CXX_VERSION VERSION_GREATER 4.6))
        set(ION_CXX_FLAGS "${ION_CXX_FLAGS} -Wno-error=unused-but-set-variable")
        set(ION_CXX_FLAGS "${ION_CXX_FLAGS} -Wno-error=unused-but-set-parameter")
    endif()
    if(GCC_CXX_VERSION VERSION_EQUAL 4.7 OR (GCC_CXX_VERSION VERSION_GREATER 4.7))
        set(ION_CXX_FLAGS "${ION_CXX_FLAGS} -Wno-error=attributes")
        set(ION_CXX_FLAGS "${ION_CXX_FLAGS} -Wno-error=narrowing")
        set(ION_CXX_FLAGS "${ION_CXX_FLAGS} -Wno-error=delete-non-virtual-dtor")
        set(ION_CXX_FLAGS "${ION_CXX_FLAGS} -Wno-unused-function")
    endif()
    if(GCC_CXX_VERSION VERSION_EQUAL 4.8 OR GCC_CXX_VERSION VERSION_GREATER 4.8)
        set(ION_CXX_FLAGS "${ION_CXX_FLAGS} -Wno-error=sizeof-pointer-memaccess")
    endif()
endif()

if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
    set(ION_CXX_FLAGS "${ION_CXX_FLAGS} -Wno-gnu")
    set(ION_CXX_FLAGS "${ION_CXX_FLAGS} -Wno-unused-private-field")
    set(ION_CXX_FLAGS "${ION_CXX_FLAGS} -Wno-unused-value")
    #set(ION_CXX_FLAGS "${ION_CXX_FLAGS} -Wno-mismatched-tags")
    set(ION_CXX_FLAGS "${ION_CXX_FLAGS} -Wno-overloaded-virtual")
    set(ION_CXX_FLAGS "${ION_CXX_FLAGS} -Wno-char-subscripts")
    set(ION_CXX_FLAGS "${ION_CXX_FLAGS} -Wno-unused-function")
    set(ION_CXX_FLAGS "${ION_CXX_FLAGS} -Wno-unused-variable")

    #TODO, remove asap
#    set(ION_CXX_FLAGS "${ION_CXX_FLAGS} -Wno-format")
#    set(ION_CXX_FLAGS "${ION_CXX_FLAGS} -Wno-sizeof-pointer-memaccess")
#    set(ION_CXX_FLAGS "${ION_CXX_FLAGS} -Wno-delete-non-virtual-dtor")
#    set(ION_CXX_FLAGS "${ION_CXX_FLAGS} -Wno-return-type")
#    set(ION_CXX_FLAGS "${ION_CXX_FLAGS} -Wno-non-literal-null-conversion")
endif()

# ICC workaround
# /usr/include/c++/4.8$ sudo ln -s /usr/include/x86_64-linux-gnu/c++/4.8 x86_64-linux-gnu # on unstable
# /usr/include/c++/4.7$ sudo ln -s /usr/include/x86_64-linux-gnu/c++/4.7 x86_64-linux-gnu # on testing

if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Intel")
#    set(ION_CXX_FLAGS "${ION_CXX_FLAGS} -std=c++0x") # causes boost? error: more than one instance of overloaded function "isnan" matches the argument list:
#    set(ION_CXX_FLAGS "${ION_CXX_FLAGS} -std=c++11") # same as older -std=c++0x # might trigger internal compiler error
    set(ION_CXX_FLAGS "${ION_CXX_FLAGS} -wd10006") # 10006: ignoring unknown option '-Wno-unused-result'
    set(ION_CXX_FLAGS "${ION_CXX_FLAGS} -wd171")  # 171: invalid type conversion: "__m128" to "v8hi"
    set(ION_CXX_FLAGS "${ION_CXX_FLAGS} -wd192")  # 192: unrecognized character escape sequence
    set(ION_CXX_FLAGS "${ION_CXX_FLAGS} -wd2089") #2089: definition of base class type not completed yet
    set(ION_CXX_FLAGS "${ION_CXX_FLAGS} -wd1011") #1011: missing return statement at end of non-void function
    set(ION_CXX_FLAGS "${ION_CXX_FLAGS} -wd488") #488: template parameter "eT2" is not used in declaring the parameter types of function template
    set(ION_CXX_FLAGS "${ION_CXX_FLAGS} -wd1292") #1292: unknown attribute "__leaf__"
    set(ION_CXX_FLAGS "${ION_CXX_FLAGS} -wd2722") #2722: list initialization syntax is a C++11 feature
endif()


set(ION_COMMON_FLAGS_DEBUG "${ION_COMMON_FLAGS} -O0 -g -DION_DEBUG")
set(ION_COMMON_FLAGS_RELEASE "${ION_COMMON_FLAGS} -O3 -g")
set(ION_COMMON_FLAGS_PROFILE "${ION_COMMON_FLAGS} -O3 -g -lprofiler")
set(CMAKE_SHARED_LINKER_FLAGS "-Wall ")

set(CMAKE_C_FLAGS_DEBUG "${ION_COMMON_FLAGS_DEBUG} ${ION_C_FLAGS}")
set(CMAKE_C_FLAGS_RELEASE "${ION_COMMON_FLAGS_RELEASE} ${ION_C_FLAGS}")
set(CMAKE_C_FLAGS_PROFILE "${ION_COMMON_FLAGS_PROFILE} ${ION_C_FLAGS}")

set(CMAKE_CXX_FLAGS_DEBUG "${ION_COMMON_FLAGS_DEBUG} ${ION_CXX_FLAGS}")
set(CMAKE_CXX_FLAGS_RELEASE "${ION_COMMON_FLAGS_RELEASE} ${ION_CXX_FLAGS}")
set(CMAKE_CXX_FLAGS_PROFILE "${ION_COMMON_FLAGS_PROFILE} ${ION_CXX_FLAGS}")

#message("DEBUG CXXFLAGS ${CMAKE_CXX_FLAGS_DEBUG}")
#message("RELEASE CXXFLAGS ${CMAKE_CXX_FLAGS_RELEASE}")

