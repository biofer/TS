# Copyright (C) 2013 Ion Torrent Systems, Inc. All Rights Reserved

find_program(LSB_RELEASE_COMMAND lsb_release)
if(LSB_RELEASE_COMMAND)
    execute_process(COMMAND ${LSB_RELEASE_COMMAND} -s -c
        OUTPUT_VARIABLE TMP_LSB_RELEASE_CODENAME
        OUTPUT_STRIP_TRAILING_WHITESPACE)
    string(TOLOWER ${TMP_LSB_RELEASE_CODENAME} LSB_RELEASE_CODENAME)
    message(STATUS "LSB release codename: "${LSB_RELEASE_CODENAME}"")
endif(LSB_RELEASE_COMMAND) 

# If defined while running cmake look for mkl
# e.g. -DMKL_INSTALL_PATH=/home/ionadmin/intel/composer_xe_2013_sp1.0.080/mkl
if (DEFINED MKL_INSTALL_PATH)
  message("Setting mkl root to ${MKL_INSTALL_PATH}")
  include_directories(${MKL_INSTALL_PATH}/include)
  set(MKL_LINK_LIBS "-Wl,--start-group  ${MKL_INSTALL_PATH}/lib/intel64/libmkl_intel_lp64.a ${MKL_INSTALL_PATH}/lib/intel64/libmkl_core.a ${MKL_INSTALL_PATH}/lib/intel64/libmkl_sequential.a -Wl,--end-group")
else() 
  message("Not setting mkl root ${MKL_INSTALL_PATH}")
endif()


option(ION_USE_MKL "Using Intel MKL" OFF)
mark_as_advanced(ION_USE_MKL)

option(ION_USE_SYSTEM_CUDA "Use CUDA system libraries" OFF)
mark_as_advanced(ION_USE_SYSTEM_CUDA)

if ("${LSB_RELEASE_CODENAME}" STREQUAL "sid")
  option(ION_USE_CUDA "Compile CUDA code" ON)
else()
  option(ION_USE_CUDA "Compile CUDA code" ON)
endif()
mark_as_advanced(ION_USE_CUDA)

option(ION_USE_SYSTEM_SAMTOOLS "Use samtools system libraries" OFF)
mark_as_advanced(ION_USE_SYSTEM_SAMTOOLS)

option(ION_USE_SYSTEM_BAMTOOLS "Use bamtools system libraries" OFF)
mark_as_advanced(ION_USE_SYSTEM_BAMTOOLS)

if ("${LSB_RELEASE_CODENAME}" STREQUAL "sid" OR
    "${LSB_RELEASE_CODENAME}" STREQUAL "jessie" OR
    "${LSB_RELEASE_CODENAME}" STREQUAL "wheezy" OR
    "${LSB_RELEASE_CODENAME}" STREQUAL "trusty" OR 
    "${LSB_RELEASE_CODENAME}" STREQUAL "saucy" OR
    "${LSB_RELEASE_CODENAME}" STREQUAL "raring")
  option(ION_USE_SYSTEM_FFTW "Use fftw system libraries" ON)
else()
  option(ION_USE_SYSTEM_FFTW "Use fftw system libraries" OFF)
endif()
mark_as_advanced(ION_USE_SYSTEM_FFTW)

if ("${LSB_RELEASE_CODENAME}" STREQUAL "sid" OR
    "${LSB_RELEASE_CODENAME}" STREQUAL "jessie" OR
    "${LSB_RELEASE_CODENAME}" STREQUAL "wheezy" OR
    "${LSB_RELEASE_CODENAME}" STREQUAL "trusty" OR
    "${LSB_RELEASE_CODENAME}" STREQUAL "saucy" OR
    "${LSB_RELEASE_CODENAME}" STREQUAL "raring")
  option(ION_USE_SYSTEM_HDF5 "Use hdf5 system libraries" ON)
else()
  option(ION_USE_SYSTEM_HDF5 "Use hdf5 system libraries" OFF)
endif()
mark_as_advanced(ION_USE_SYSTEM_HDF5)

option(ION_USE_SYSTEM_EIGEN "Use EIGEN system libraries" OFF)
mark_as_advanced(ION_USE_SYSTEM_EIGEN)

option(ION_USE_SYSTEM_ARMADILLO "Use armadillo system libraries" OFF)
mark_as_advanced(ION_USE_SYSTEM_ARMADILLO)

option(ION_USE_SYSTEM_BOOST "Use boost system libraries" ON)
mark_as_advanced(ION_USE_SYSTEM_BOOST)

option(ION_USE_SYSTEM_LEVMAR "Use systems default levmar libraries" OFF)
mark_as_advanced(ION_USE_SYSTEM_LEVMAR)

option(ION_USE_SYSTEM_PICARD "Use picard system libraries" OFF)
mark_as_advanced(ION_USE_SYSTEM_PICARD)


ExternalProject_add(${cuda_toolkit}
    PREFIX ${PROJECT_BINARY_DIR}/../${cuda_toolkit_version}-prefix
    SOURCE_DIR ${PROJECT_BINARY_DIR}/../${cuda_toolkit_version}
    URL "http://${ION_UPDATE_SERVER}/updates/software/external/${cuda_toolkit_tar_file}"
#    URL_MD5 ""
    TIMEOUT "3600"
    CONFIGURE_COMMAND ""
    BUILD_COMMAND ""
    INSTALL_COMMAND ""
    PATCH_COMMAND patch -p1 -t -N < "${PROJECT_SOURCE_DIR}/../external/cuda_toolkit-5.5.22.patch" 
)


ExternalProject_add(${cuda_devdriver}
    PREFIX ${PROJECT_BINARY_DIR}/../${cuda_devdriver_version}-prefix
    SOURCE_DIR ${PROJECT_BINARY_DIR}/../${cuda_devdriver_version}
    URL "http://${ION_UPDATE_SERVER}/updates/software/external/${cuda_devdriver_file}.tar.gz" # cmake doesn't download .run files
#    URL_MD5 ""
    TIMEOUT "3600"
    CONFIGURE_COMMAND ""
    BUILD_COMMAND ""
    INSTALL_COMMAND ""
)


if(ION_USE_CUDA)
    message(STATUS "BUILD with CUDA ${CUDA_VERSION}")
    add_definitions(-DION_COMPILE_CUDA)
    if (NOT ION_USE_SYSTEM_CUDA)

        set(CUDA_TOOLKIT_ROOT_DIR "${PROJECT_BINARY_DIR}/../${cuda_toolkit_version}")
        set(CUDA_INCLUDE_DIRS "${PROJECT_BINARY_DIR}/../${cuda_toolkit_version}/include")
        set(CUDA_NVCC_EXECUTABLE "${PROJECT_BINARY_DIR}/../${cuda_toolkit_version}/bin/nvcc")
        set(CUDA_CUDART_LIBRARY "${PROJECT_BINARY_DIR}/../${cuda_toolkit_version}/lib64/libcudart.so")
        set(CUDA_TOOLKIT_INCLUDE "${PROJECT_BINARY_DIR}/../${cuda_toolkit_version}/include")
        set(CUDA_cublas_LIBRARY "${PROJECT_BINARY_DIR}/../${cuda_toolkit_version}/lib64/libcublas.so")
        set(CUDA_cufft_LIBRARY "${PROJECT_BINARY_DIR}/../${cuda_toolkit_version}/lib64/libcufft.so")
        set(CUDA_VERBOSE_BUILD OFF)
        set(CUDA_64_BIT_DEVICE_CODE ON)
        include(${CMAKE_ROOT}/Modules/FindCUDA.cmake)

    else()
        find_package(CUDA REQUIRED)
    endif()
    include_directories(${CUDA_INCLUDE_DIRS})
    message(STATUS "CUDA_LIBRARIES: ${CUDA_LIBRARIES}")
    message(STATUS "CUDA_INCLUDE_DIRS: ${CUDA_INCLUDE_DIRS}")
endif()

if (NOT ION_USE_SYSTEM_FFTW)
  set(proj_name "fftw")
  set(proj_version "3.3")
  set(proj_name_version "${proj_name}-${proj_version}")
  ExternalProject_add(${proj_name}
    URL "http://${ION_UPDATE_SERVER}/updates/software/external/fftw-3.3.tar.gz"
#    URL_MD5 "0728ab3ec0ebb06631ab3b80a5c3d130"
    PREFIX ${PROJECT_BINARY_DIR}/../${proj_name_version}-prefix
    SOURCE_DIR ${PROJECT_BINARY_DIR}/../${proj_name_version}
    BINARY_DIR ${PROJECT_BINARY_DIR}/../${proj_name_version}-build
    CONFIGURE_COMMAND ${PROJECT_BINARY_DIR}/../${proj_name_version}/configure
    --enable-static --with-pic
    --prefix=${PROJECT_BINARY_DIR}/../${proj_name_version}-install
  )
  include_directories("${PROJECT_BINARY_DIR}/../${proj_name_version}-install/include")
  set(ION_FFTW_LIBS "${PROJECT_BINARY_DIR}/../${proj_name_version}-install/lib/libfftw3.a")
else()
  set(ION_FFTW_LIBS libfftw3.a)
endif()

if(NOT ION_USE_SYSTEM_HDF5)
  set(proj_name "hdf5")
  set(proj_version "1.8.8")
  set(proj_name_version "${proj_name}-${proj_version}")
  ExternalProject_add(${proj_name}_proj
    URL "http://${ION_UPDATE_SERVER}/updates/software/external/hdf5-1.8.8.tar.gz"
#    URL_MD5 1196e668f5592bfb50d1de162eb16cff
    PREFIX ${PROJECT_BINARY_DIR}/../${proj_name_version}-prefix
    SOURCE_DIR ${PROJECT_BINARY_DIR}/../${proj_name_version}
    BINARY_DIR ${PROJECT_BINARY_DIR}/../${proj_name_version}-build
    CONFIGURE_COMMAND ${PROJECT_BINARY_DIR}/../${proj_name_version}/configure
    --with-pic=yes --disable-shared --with-pthread --enable-threadsafe
    --prefix=${PROJECT_BINARY_DIR}/../${proj_name_version}-install
  )
  include_directories("${PROJECT_BINARY_DIR}/../${proj_name_version}-install/include")
  set(ION_HDF5_LIBS "${PROJECT_BINARY_DIR}/../${proj_name_version}-install/lib/libhdf5.a")
  set(ION_HDF5_HL_LIBS "${PROJECT_BINARY_DIR}/../${proj_name_version}-install/lib/libhdf5_hl.a")
else()
  set(HDF5_USE_STATIC_LIBRARIES True)
  find_package(HDF5 REQUIRED)
  set(ION_HDF5_LIBS ${HDF5_LIBRARIES})
  message(STATUS "ION_HDF5_LIBS: ${HDF5_LIBRARIES}")
endif()

if(NOT ION_USE_SYSTEM_EIGEN)
  include_directories("${ION_TS_EXTERNAL}/eigen-3.2")
endif()

if(NOT ION_USE_SYSTEM_ARMADILLO)
  set(proj_name "armadillo")
  set(proj_version "4.300.0+ion0")
  set(proj_name_version "${proj_name}-${proj_version}")
  set(ARMADILLO_PATCH "${PROJECT_SOURCE_DIR}/../external/armadillo-4.300.0+ion0.patch")
  ExternalProject_add(${proj_name}_proj
    URL "http://${ION_UPDATE_SERVER}/updates/software/external/armadillo-4.300.0.tar.gz"
    #URL_MD5 e8400bc7adb65fa0edc8c8ccb49b60eb
    PREFIX ${PROJECT_BINARY_DIR}/../${proj_name_version}-prefix
    SOURCE_DIR ${PROJECT_BINARY_DIR}/../${proj_name_version}
    BINARY_DIR ${PROJECT_BINARY_DIR}/../${proj_name_version}-build
    CMAKE_ARGS
      -DARMA_USE_ATLAS:BOOL=FALSE
      -DARMA_USE_WRAPPER:BOOL=FALSE
      -DARMA_USE_MKL:BOOL=${ION_USE_MKL}
      -DCMAKE_INSTALL_PREFIX:PATH=${PROJECT_BINARY_DIR}/../${proj_name_version}-install
    PATCH_COMMAND patch -p0 -t -N < "${ARMADILLO_PATCH}"
  )
  set(ION_ARMADILLO_LIBS "${PROJECT_BINARY_DIR}/../${proj_name_version}-install/lib/libarmadillo.so")
  include_directories("${PROJECT_BINARY_DIR}/../${proj_name_version}-install/include")
else()
  set(ION_ARMADILLO_LIBS "armadillo")
endif()


if(NOT ION_USE_SYSTEM_BOOST)
  set(proj_name "boost")
  set(proj_version "1.49.0")
  set(proj_name_version "${proj_name}-${proj_version}")
  ExternalProject_add(${proj_name}
    SVN_REPOSITORY "http://svn.boost.org/svn/boost/tags/release/Boost_1_49_0"
    PREFIX ${PROJECT_BINARY_DIR}/../${proj_name_version}-prefix
    SOURCE_DIR ${PROJECT_BINARY_DIR}/../${proj_name_version}
    BINARY_DIR ${PROJECT_BINARY_DIR}/../${proj_name_version}-build
    UPDATE_COMMAND ""
    CONFIGURE_COMMAND ./bootstrap.sh
    BUILD_IN_SOURCE 1
    BUILD_COMMAND     ./bjam install
    --build-dir=${PROJECT_BINARY_DIR}/../${proj_name_version}-build
    --prefix=${PROJECT_BINARY_DIR}/../${proj_name_version}-install
    --with-serialization
    INSTALL_COMMAND ""
    )
  include_directories("${PROJECT_BINARY_DIR}/../${proj_name_version}-install/include")
  set(ION_BOOST_LIBS "${PROJECT_BINARY_DIR}/../${proj_name_version}-install/lib/libboost_serialization.a")
else()
  find_package(Boost REQUIRED)
  include_directories(${Boost_INCLUDE_DIRS})
  set(ION_BOOST_LIBS "boost_serialization.a")
endif()

# uncomment for profiling if gprofile installed
# add_library(PROFILE STATIC IMPORTED)
# set_property(TARGET PROFILE PROPERTY IMPORTED_LOCATION "/usr/local/lib/libprofiler.a")

include_directories("${PROJECT_BINARY_DIR}")
include_directories("${PROJECT_SOURCE_DIR}")
include_directories("${PROJECT_SOURCE_DIR}/../external/jsoncpp-src-amalgated0.6.0-rc1")


if (NOT ION_USE_SYSTEM_SAMTOOLS)
  set(proj_name "samtools")
  set(proj_version "0.1.19+ion1")
  set(proj_name_version "${proj_name}-${proj_version}")
  ExternalProject_add(${proj_name}
    URL "http://${ION_UPDATE_SERVER}/updates/software/external/samtools-0.1.19.tar.gz"
    #URL_MD5 7373854ca343ebee6a52874fcfc3a4a4
    PREFIX ${PROJECT_BINARY_DIR}/../${proj_name_version}-prefix
    SOURCE_DIR ${PROJECT_BINARY_DIR}/../${proj_name_version}
    BINARY_DIR ${PROJECT_BINARY_DIR}/../${proj_name_version}-build
    CMAKE_ARGS
       -DBUILD_SHARED_LIBS:BOOL=OFF
       -DCMAKE_INSTALL_PREFIX:PATH=${PROJECT_BINARY_DIR}/../${proj_name_version}-install
    PATCH_COMMAND patch -p1 -t -N < "${ION_TS_EXTERNAL}/samtools-0.1.19+ion1.patch"
  )
  include_directories("${PROJECT_BINARY_DIR}/../${proj_name_version}-install/include")
  set(ION_SAMTOOLS_LIBS "${PROJECT_BINARY_DIR}/../${proj_name_version}-install/lib/libbam.a")
else()
    set(ION_SAMTOOLS_LIBS libbam.a)
    include_directories("/usr/include/samtools")
endif()


if (NOT ION_USE_SYSTEM_PICARD)
  set(proj_name "picard")
  set(proj_version "1.113")
  set(proj_name_version "${proj_name}-${proj_version}")
  ExternalProject_add(${proj_name}
    URL "http://${ION_UPDATE_SERVER}/updates/software/external/picard-tools-1.113.tar.gz"
    #URL_MD5 
    # in source build
    PREFIX ${PROJECT_BINARY_DIR}/../${proj_name_version}-prefix
    SOURCE_DIR "${PROJECT_BINARY_DIR}/../${proj_name_version}"
    BINARY_DIR "${PROJECT_BINARY_DIR}/../${proj_name_version}-build"
    CONFIGURE_COMMAND ""
    BUILD_COMMAND ""
    INSTALL_COMMAND ""
  )
endif()


if (NOT ION_USE_SYSTEM_BAMTOOLS)
    set(proj_name "bamtools")
    set(revision_tag 67178ae187)#set date below accordingly
    set(proj_version "2.3.0.20131211+git${revision_tag}")
    set(proj_name_version "${proj_name}-${proj_version}")
    ExternalProject_add(${proj_name}
      URL "http://${ION_UPDATE_SERVER}/updates/software/external/bamtools-2.3.0.20131211+git67178ae187.tar.gz"
#      GIT_REPOSITORY "https://github.com/iontorrent/bamtools.git"
#      GIT_TAG ${revision_tag}
      PREFIX ${PROJECT_BINARY_DIR}/../${proj_name_version}-prefix
      SOURCE_DIR ${PROJECT_BINARY_DIR}/../${proj_name_version}
      BINARY_DIR ${PROJECT_BINARY_DIR}/../${proj_name_version}-build
      CMAKE_ARGS
        -DCMAKE_INSTALL_PREFIX:PATH=${PROJECT_BINARY_DIR}/../${proj_name_version}-install
    )
    include_directories("${PROJECT_BINARY_DIR}/../${proj_name_version}-install/include/bamtools")
    set(ION_BAMTOOLS_LIBS "${PROJECT_BINARY_DIR}/../${proj_name_version}-install/lib/bamtools/libbamtools.a")
else()
    set(ION_BAMTOOLS_LIBS libbamtools.a)
    include_directories("/usr/include/bamtools")
endif()


if(NOT ION_USE_SYSTEM_LEVMAR)
  set(proj_name "levmar")
  set(proj_version "2.6")
  set(proj_name_version "${proj_name}-${proj_version}")
  ExternalProject_add(${proj_name}
    #URL            "http://www.ics.forth.gr/~lourakis/levmar/levmar-2.6.tgz"
    URL             "http://${ION_UPDATE_SERVER}/updates/software/external/levmar-2.6.tgz"
    PREFIX          ${PROJECT_BINARY_DIR}/../${proj_name_version}-prefix
    SOURCE_DIR      ${PROJECT_BINARY_DIR}/../${proj_name_version}
    BINARY_DIR      ${PROJECT_BINARY_DIR}/../${proj_name_version}-build
    CMAKE_ARGS      -DLINSOLVERS_RETAIN_MEMORY=0 -DHAVE_LAPACK=0 -DNEED_F2C=0 -DBUILD_DEMO=0
    INSTALL_COMMAND ""
  )
  include_directories("${PROJECT_BINARY_DIR}/../${proj_name_version}")
  set(ION_LEVMAR_LIBS "${PROJECT_BINARY_DIR}/../${proj_name_version}-build/liblevmar.a")
else()
  set(LEVMAR_USE_STATIC_LIBRARIES True)
  find_package(LEVMAR REQUIRED)
  set(ION_LEVMAR_LIBS ${LEVMAR_LIBRARIES})
endif()


  set(proj_name "kmeans")
  set(proj_version "1.7")
  set(proj_name_version "${proj_name}-${proj_version}")
  ExternalProject_add(${proj_name}_proj
    URL             "http://${ION_UPDATE_SERVER}/updates/software/external/kmlocal-1.7.2.tar.gz"
    PREFIX          ${PROJECT_BINARY_DIR}/../${proj_name_version}-prefix
    SOURCE_DIR      ${PROJECT_BINARY_DIR}/../${proj_name_version}
    BINARY_DIR      ${PROJECT_BINARY_DIR}/../${proj_name_version}-build
#    CMAKE_ARGS      
    INSTALL_COMMAND ""
    PATCH_COMMAND patch -p0 -t -N < "${ION_TS_EXTERNAL}/kmeans-1.7+ion1.patch"
  )
  include_directories("${PROJECT_BINARY_DIR}/../${proj_name_version}/src")
  set(ION_KMEANS_LIBS "${PROJECT_BINARY_DIR}/../${proj_name_version}-build/libkmeans.a")
