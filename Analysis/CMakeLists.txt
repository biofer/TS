# Copyright (C) 2010 Ion Torrent Systems, Inc. All Rights Reserved
cmake_minimum_required (VERSION 2.6)
project (ion-analysis)
set(PROJECT_DESCRIPTION "Ion Torrent Data Processing Pipeline")
enable_testing()

include(CheckCCompilerFlag)
check_c_compiler_flag( -malign-double HAS_ALIGN_DOUBLE )

# This inconspicuous line holds the key to IR integration of tvc, tmap, and bamrealignment:
#set(CMAKE_EXE_LINKER_FLAGS -static)


option(ION_DO_BACKGROUND "Build with background model" ON)
mark_as_advanced(ION_DO_BACKGROUND)

option(ION_BUILD_STRAND_BIAS "Build samita and Strand_Bias_Extractor" OFF)
mark_as_advanced(ION_BUILD_STRAND_BIAS)

if(NOT CMAKE_SYSTEM_NAME STREQUAL "Darwin")
    set(ION_DO_BACKGROUND OFF CACHE BOOL "Build with background model")
endif()

include(../buildTools/cmake/CMakeLists.version.txt)
include(../buildTools/cmake/CMakeLists.compiler.txt)

# Where to install - override with: -DION_INSTALL_PREFIX
set(ION_INSTALL_PREFIX "/opt/ion" CACHE PATH "Ion Install Prefix")

set(CPACK_PACKAGING_INSTALL_PREFIX ${ION_INSTALL_PREFIX})
set(CPACK_SET_DESTDIR "ON")

configure_file (
    "${PROJECT_SOURCE_DIR}/debian/postinst.in"
    "${PROJECT_BINARY_DIR}/debian/postinst" @ONLY
)
configure_file (
    "${PROJECT_SOURCE_DIR}/debian/prerm.in"
    "${PROJECT_BINARY_DIR}/debian/prerm" @ONLY
)

include(../buildTools/cmake/CMakeLists.dependencies.txt)
include_directories("/home/ionadmin/intel/composer_xe_2013_sp1.0.080/mkl/include/")
include_directories("${PROJECT_SOURCE_DIR}/Replay")
include_directories("${PROJECT_SOURCE_DIR}/AnalysisOrg")
include_directories("${PROJECT_SOURCE_DIR}/AnalysisOrg/justBeadFind")
include_directories("${PROJECT_SOURCE_DIR}/AnalysisOrg/IO")
include_directories("${PROJECT_SOURCE_DIR}/BkgModel")
include_directories("${PROJECT_SOURCE_DIR}/SynchDat")
include_directories("${PROJECT_SOURCE_DIR}/BkgModel/MathModel")
include_directories("${PROJECT_SOURCE_DIR}/BkgModel/Bookkeeping")
include_directories("${PROJECT_SOURCE_DIR}/BkgModel/LocalTrace")
include_directories("${PROJECT_SOURCE_DIR}/BkgModel/Fitters")
include_directories("${PROJECT_SOURCE_DIR}/BkgModel/Fitters/Complex")
include_directories("${PROJECT_SOURCE_DIR}/BkgModel/Writers")
include_directories("${PROJECT_SOURCE_DIR}/BkgModel/CUDA")
include_directories("${PROJECT_SOURCE_DIR}/BkgModel/Sampling")
include_directories("${PROJECT_SOURCE_DIR}/BaseCaller")
include_directories("${PROJECT_SOURCE_DIR}/Separator")
include_directories("${PROJECT_SOURCE_DIR}/NormWells")
include_directories("${PROJECT_SOURCE_DIR}/Util")
#this has enough files now to justify own directory
include_directories("${PROJECT_SOURCE_DIR}/Image")
include_directories("${PROJECT_SOURCE_DIR}/Mask")
include_directories("${PROJECT_SOURCE_DIR}/Wells")

# CUDA Files
if(ION_USE_CUDA)
    ## NOTE: -O2 enables strict-aliasing, and code is not clean
    SET( CUDA_NVCC_FLAGS "-O2" "--compiler-options=-fno-strict-aliasing" "-g" "--use_fast_math"
                         "-gencode=arch=compute_20,code=sm_20"
                         "-gencode=arch=compute_30,code=sm_30"
                         "-gencode=arch=compute_35,code=sm_35"
                         "-gencode=arch=compute_35,code=compute_35"
                         "-maxrregcount=48" )
    if( HAS_MALIGN_DOUBLE )
        add_definitions(-malign-double) ## See CUDA 4.0 Release Nodes
    endif()
    ## If user set CXX on command line, make sure NVCC respects it
    ## (necessary for compiling on systems where default compiler is not nvcc compatible)
    if($ENV{CXX} MATCHES ".+")
        LIST(APPEND CUDA_NVCC_FLAGS --compiler-bindir $ENV{CXX})
    endif() #($ENV{CXX} MATCHES ".+")
    CUDA_COMPILE(CUDA_TEMP_FILES 
      BkgModel/CUDA/SingleFitStream.cu
      BkgModel/CUDA/MultiFitStream.cu
      BkgModel/CUDA/StreamingKernels.cu
      BkgModel/CUDA/JobWrapper.cu 
      BkgModel/CUDA/MemoryManager.cu
      BkgModel/CUDA/ResourcePool.cu
      BkgModel/CUDA/StreamManager.cu 

      SHARED
    )


endif()

# Ion Analysis Library
add_library(ion-analysis

    ${PROJECT_BINARY_DIR}/IonVersion.cpp

    Wells/RawWells.cpp
    Wells/RawWellsV1.cpp

    Image/deInterlace.cpp
    Image/Image.cpp
    Image/TikhonovSmoother.cpp
    Image/PreDefinedTikParams.cpp
    Image/ChipIdDecoder.cpp
    Image/ImageTransformer.cpp
    Image/LSRowImageProcessor.cpp
    Image/ComparatorNoiseCorrector.cpp
    Image/IonImageSem.cpp
    Image/AdvCompr.cpp
    Image/PCACompression.cpp
    Image/PcaSpline.cpp
#    Image/DfcCompr.cpp
#    Image/ParallelDFT.cpp
    Image/PairPixelXtalkCorrector.cpp
    Image/ImageNNAvg.cpp

    Mask/PinnedInFlow.cpp
    Mask/Mask.cpp
    Mask/ComplexMask.cpp
    
    Separator/DualGaussMixModel.cpp
    Separator/Separator.cpp
    Separator/DifferentialSeparator.cpp
    Separator/NNAvg.cpp
    Separator/ChipReduction.cpp
#    Separator/KeyClassifier.cpp
#    Separator/KClass.cpp
    Separator/BFReference.cpp
    Separator/Traces.cpp
    Separator/EvaluateKey.cpp
    Separator/ZeromerMatDiff.cpp
    Separator/BfMetric.cpp
    Separator/TraceSaver.cpp
    Separator/TraceStoreCol.cpp

    Util/H5File.cpp
    Util/IonErr.cpp
    Util/Utils.cpp
    Util/HandleExpLog.cpp
    Util/OptArgs.cpp
    Util/OptionArgsBase.cpp
    Util/OptionArgs.cpp
    Util/LoggerBase.cpp
    Util/Logger.cpp
    Util/bivariate_gaussian.cpp
    Util/flow_utils.cpp
    Util/WorkerInfoQueue.cpp
    Util/SeqUtils.cpp

    AnalysisOrg/IO/CommandLineOpts.cpp
    AnalysisOrg/IO/KeyContext.cpp
    AnalysisOrg/IO/FlowContext.cpp
    AnalysisOrg/IO/BkgControlOpts.cpp
    AnalysisOrg/IO/GpuControlOpts.cpp
    AnalysisOrg/IO/BeadfindControlOpts.cpp
    AnalysisOrg/IO/ImageControlOpts.cpp
    AnalysisOrg/IO/BkgModelHdf5.cpp
    AnalysisOrg/IO/TrackProgress.cpp
    AnalysisOrg/IO/ProgramState.cpp
    AnalysisOrg/IO/CaptureImageState.cpp
    AnalysisOrg/IO/DebugMe.cpp
	AnalysisOrg/IO/OptBase.cpp
    
    AnalysisOrg/justBeadFind/SeparatorInterface.cpp
    AnalysisOrg/justBeadFind/SetUpForProcessing.cpp
    
    AnalysisOrg/SystemContext.cpp
    AnalysisOrg/SpatialContext.cpp
    AnalysisOrg/ImageSpecClass.cpp
    AnalysisOrg/ImageLoader.cpp
    AnalysisOrg/ImageLoaderQueue.cpp
    AnalysisOrg/ProcessImageToWell.cpp
    AnalysisOrg/RegionTimingCalc.cpp
    AnalysisOrg/SeqList.cpp
    AnalysisOrg/WellFileManipulation.cpp
    AnalysisOrg/BkgDataPointers.cpp
    AnalysisOrg/BkgFitterTracker.cpp
    AnalysisOrg/SlicedPrequel.cpp
    AnalysisOrg/SignalProcessingFitterQueue.cpp
    AnalysisOrg/ClonalFilter.cpp
    AnalysisOrg/MaskFunctions.cpp
    AnalysisOrg/cudaWrapper.cpp
    AnalysisOrg/FlowSequence.cpp
        
    Region.cpp
    LinuxCompat.cpp
    Stats.cpp

    LevMarFitterV2.cpp
    
    mixed.cpp
    # T0CalcMt.cpp
    
    BaseCaller/PIDloop.cpp
    BaseCaller/DPTreephaser.cpp
    BaseCaller/RecalibrationModel.cpp
    
    BkgModel/MathModel/MathOptim.cpp
    BkgModel/MathModel/PoissonCdf.cpp
    BkgModel/MathModel/DNTPRiseModel.cpp
    BkgModel/MathModel/DiffEqModel.cpp
    BkgModel/MathModel/DiffEqModelVec.cpp
    BkgModel/MathModel/Hydrogen.cpp
    BkgModel/MathModel/MathUtil.cpp
    BkgModel/MathModel/MiscVec.cpp
    BkgModel/MathModel/MultiFlowModel.cpp

    BkgModel/Bookkeeping/BeadParams.cpp
    BkgModel/Bookkeeping/BeadTracker.cpp
    BkgModel/Bookkeeping/RegionParamDefault.cpp
    BkgModel/Bookkeeping/RegionParams.cpp
    BkgModel/Bookkeeping/RegionTracker.cpp
    BkgModel/Bookkeeping/FlowBuffer.cpp
    BkgModel/Bookkeeping/FlowDefaults.cpp
    BkgModel/Bookkeeping/NucStepCache.cpp
    BkgModel/Bookkeeping/TimeControl.cpp
    BkgModel/Bookkeeping/TimeCompression.cpp
    BkgModel/Bookkeeping/EmphasisVector.cpp
    BkgModel/Bookkeeping/DarkHalo.cpp
    BkgModel/Bookkeeping/CrossTalkSpec.cpp
    BkgModel/Bookkeeping/XtalkCurry.cpp
    BkgModel/Bookkeeping/TraceCurry.cpp
    BkgModel/Bookkeeping/BeadScratch.cpp
    BkgModel/Bookkeeping/WellXtalk.cpp
    BkgModel/Bookkeeping/ControlSingleFlow.cpp
    BkgModel/Bookkeeping/FitterDefaults.cpp

    BkgModel/LocalTrace/BkgTrace.cpp
    BkgModel/LocalTrace/EmptyTrace.cpp
    BkgModel/LocalTrace/TraceClassifier.cpp
    BkgModel/LocalTrace/EmptyTraceTracker.cpp

    BkgModel/Fitters/Complex/FitControl.cpp
    BkgModel/Fitters/Complex/MultiLevMar.cpp
    BkgModel/Fitters/Complex/LevMarState.cpp
    BkgModel/Fitters/Complex/BkgFitMatrixPacker.cpp
    BkgModel/Fitters/Complex/BkgFitStructures.cpp
    BkgModel/Fitters/Complex/BkgFitOptim.cpp
    
    BkgModel/Fitters/SingleFlowFit.cpp
    BkgModel/Fitters/RefineFit.cpp
    BkgModel/Fitters/RefineTime.cpp
    BkgModel/Fitters/SpatialCorrelator.cpp
    BkgModel/Fitters/BkgSearchAmplitude.cpp
    BkgModel/Fitters/DarkMatter.cpp
    BkgModel/Fitters/TraceCorrector.cpp
    BkgModel/Fitters/ExpTailFitter.cpp

    BkgModel/Writers/DebugWriter.cpp
    BkgModel/Writers/GlobalWriter.cpp
    
    BkgModel/GlobalDefaultsForBkgModel.cpp
    BkgModel/SignalProcessingMasterFitter.cpp
    BkgModel/RegionalizedData.cpp

    BkgModel/CUDA/GpuMultiFlowFitControl.cpp
    BkgModel/CUDA/GpuMultiFlowFitMatrixConfig.cpp

    BkgModel/Sampling/FitDensity.cpp
    BkgModel/Sampling/SampleClonality.cpp
    NormWells/NoKeyCall.cpp

    SynchDat/BitHandler.cpp
    SynchDat/HuffmanEncode.cpp
    SynchDat/SynchDatSerialize.cpp
    SynchDat/VencoLossless.cpp
    SynchDat/DeltaComp.cpp
    SynchDat/DeltaCompFst.cpp
    SynchDat/DeltaCompFstSmX.cpp
    SynchDat/SvdDatCompress.cpp
    SynchDat/DelicatoCompression.cpp
    SynchDat/compression.cpp
    SynchDat/matrixRounding.cpp
    SynchDat/unpackMatrix.cpp
    SynchDat/packMatrix.cpp
#    SynchDat/SvdDatCompressPlus.cpp 

    #Replay/FileBkgReplay.cpp
    Replay/H5Replay.cpp
    #Replay/PinnedInFlowReplay.cpp
    #Replay/EmptyTraceReplay.cpp
    #Replay/RegionTrackerReplay.cpp
    #Replay/BkgModelReplay.cpp

    crop/Acq.cpp
    crop/PreviousFrameSubtract.cpp 

    SFFWrapper.cpp
    
    SamUtils/types/Cigar.cpp
    SamUtils/types/Qual.cpp
    SamUtils/types/Sequence.cpp
    SamUtils/types/BAMRead.cpp
    SamUtils/types/MD.cpp
    SamUtils/BAMReader.cpp
    SamUtils/BAMUtils.cpp
    SamUtils/alignStats.cpp

    Recall/FlowAlignment.cpp

    ${ION_TS_EXTERNAL}/jsoncpp-src-amalgated0.6.0-rc1/jsoncpp.cpp
    ${CUDA_TEMP_FILES}
)
add_dependencies(ion-analysis IONVERSION samtools bamtools fftw armadillo_proj hdf5_proj boost kmeans_proj)
if(ION_USE_CUDA)
  if(NOT ION_USE_SYSTEM_CUDA)
    add_dependencies(ion-analysis ${cuda_toolkit})
    # Changes J30
    #add_dependencies(ion-analysis ${cuda_toolkit} armadillo_proj)
  endif()
endif()

if ("${LSB_RELEASE_CODENAME}" STREQUAL "lucid")
    set(LUCID_EXTRA_LIB lapack_atlas)
endif()

# armadillo doesn't provide those libs?
if(ION_USE_MKL)
    set(EXTRA_LIBS iomp5 mkl_intel_lp64)
else()
    set(EXTRA_LIBS blas lapack)
endif()

target_link_libraries(ion-analysis ${ION_FFTW_LIBS} ${ION_HDF5_LIBS} ${ION_KMEANS_LIBS} ${ION_BOOST_LIBS} ${ION_ARMADILLO_LIBS} ${EXTRA_LIBS} ${LUCID_EXTRA_LIB} file-io z)

set_target_properties(ion-analysis PROPERTIES
    VERSION   "${ION_VERSION_MAJOR}.${ION_VERSION_MINOR}.${ION_VERSION_RELEASE}.${ION_VERSION_BUILDNUM}"
)
if( CMAKE_SYSTEM_PROCESSOR STREQUAL "x86_64" )
        set_target_properties(ion-analysis PROPERTIES COMPILE_FLAGS "-fPIC")
endif( CMAKE_SYSTEM_PROCESSOR STREQUAL "x86_64" )
install(TARGETS ion-analysis DESTINATION lib)


add_executable(Crop crop/Crop.cpp ${PROJECT_BINARY_DIR}/IonVersion.cpp)
add_dependencies(Crop IONVERSION)
target_link_libraries(Crop ion-analysis pthread dl)
install(TARGETS Crop DESTINATION bin)

add_executable(ChkDat crop/ChkDat.cpp ${PROJECT_BINARY_DIR}/IonVersion.cpp)
add_dependencies(ChkDat IONVERSION)
target_link_libraries(ChkDat ion-analysis pthread dl)
install(TARGETS ChkDat DESTINATION bin)

add_executable(CmpDat crop/CmpDat.cpp ${PROJECT_BINARY_DIR}/IonVersion.cpp)
add_dependencies(CmpDat IONVERSION)
target_link_libraries(CmpDat ion-analysis pthread dl)
install(TARGETS CmpDat DESTINATION bin)

add_executable(Blocks crop/Blocks.cpp ${PROJECT_BINARY_DIR}/IonVersion.cpp)
add_dependencies(Blocks IONVERSION)
target_link_libraries(Blocks ion-analysis pthread dl)
install(TARGETS Blocks DESTINATION bin)

add_executable(CropRegions crop/CropRegions.cpp ${PROJECT_BINARY_DIR}/IonVersion.cpp)
add_dependencies(CropRegions IONVERSION)
target_link_libraries(CropRegions ion-analysis pthread dl)
install(TARGETS CropRegions DESTINATION bin)

add_executable(MergeRegions crop/MergeRegions.cpp crop/MergeAcq.cpp ${PROJECT_BINARY_DIR}/IonVersion.cpp)
add_dependencies(MergeRegions IONVERSION)
target_link_libraries(MergeRegions ion-analysis pthread dl)
install(TARGETS MergeRegions DESTINATION bin)

add_executable(MergeImages crop/MergeImages.cpp crop/MergeAcq.cpp ${PROJECT_BINARY_DIR}/IonVersion.cpp)
add_dependencies(MergeImages IONVERSION)
target_link_libraries(MergeImages ion-analysis pthread dl)
install(TARGETS MergeImages DESTINATION bin)

add_executable(MergeDats crop/MergeDats.cpp crop/MergeAcq.cpp ${PROJECT_BINARY_DIR}/IonVersion.cpp)
add_dependencies(MergeDats IONVERSION)
target_link_libraries(MergeDats ion-analysis pthread dl)
install(TARGETS MergeDats DESTINATION bin)

# If doing pca spline trial
add_executable(PcaSplineExample Image/PcaSplineExample.cpp ${PROJECT_BINARY_DIR}/IonVersion.cpp)
add_dependencies(PcaSplineExample IONVERSION)
# If defined while running cmake look for mkl
# e.g. -DMKL_INSTALL_PATH=/home/ionadmin/intel/composer_xe_2013_sp1.0.080/mkl
if (DEFINED MKL_INSTALL_PATH)
  message("Compiling PcaSplineExample with mkl")
  target_link_libraries(PcaSplineExample ion-analysis ${MKL_LINK_LIBS} -lpthread -lm  dl z)
else()
  message("Compiling PcaSplineExample with eigen only")
  target_link_libraries(PcaSplineExample ion-analysis file-io pthread m dl z)
endif()

# If doing DfcCompr trial
#add_executable(DfcComprExample Image/DfcComprExample.cpp ${PROJECT_BINARY_DIR}/IonVersion.cpp)
#add_dependencies(DfcComprExample IONVERSION)
# If defined while running cmake look for mkl
# e.g. -DMKL_INSTALL_PATH=/home/ionadmin/intel/composer_xe_2013_sp1.0.080/mkl
#if (DEFINED MKL_INSTALL_PATH)
#  message("Compiling DfcComprExample with mkl")
#  target_link_libraries(DfcComprExample ion-analysis ${MKL_LINK_LIBS} -lpthread -lm  dl z)
#else()
#  message("Compiling DfcComprExample with eigen only")
#  target_link_libraries(DfcComprExample ion-analysis file-io pthread m dl z)
#endif()

add_executable(Archive crop/Archive.cpp ${PROJECT_BINARY_DIR}/IonVersion.cpp)
add_dependencies(Archive IONVERSION)
target_link_libraries(Archive ion-analysis pthread dl)

if(ION_DO_BACKGROUND)
    add_executable(Analysis AnalysisOrg/Analysis.cpp ${PROJECT_BINARY_DIR}/IonVersion.cpp)
    add_dependencies(Analysis IONVERSION)

    if (ION_USE_CUDA)
        target_link_libraries(Analysis ion-analysis pthread dl ${CUDA_LIBRARIES})
    else()
        target_link_libraries(Analysis ion-analysis pthread dl)
    endif()

    install(TARGETS Analysis DESTINATION bin)

#    add_executable(bkgFit bkgFit.cpp ${PROJECT_BINARY_DIR}/IonVersion.cpp)
#    add_dependencies(bkgFit IONVERSION)
#    if (ION_USE_CUDA)
#        target_link_libraries(bkgFit ion-analysis pthread ${CUDA_LIBRARIES} ${ION_ARMADILLO_LIBS})
#    else()
#	target_link_libraries(bkgFit ion-analysis ${GTEST_BOTH_LIBRARIES} pthread)
#    endif()
endif()

## Standalone BeadFind
add_executable(justBeadFind AnalysisOrg/justBeadFind/justBeadFind.cpp ${PROJECT_BINARY_DIR}/IonVersion.cpp)
add_dependencies(justBeadFind IONVERSION)
target_link_libraries(justBeadFind ion-analysis ${CERES_LIB} ${MINIGLOG_LIB} ${GLOG_LIB} pthread dl)
install(TARGETS justBeadFind DESTINATION bin)

add_executable(BeadfindStats Separator/BeadfindStats.cpp ${PROJECT_BINARY_DIR}/IonVersion.cpp)
add_dependencies(BeadfindStats IONVERSION)
target_link_libraries(BeadfindStats ion-analysis pthread dl)

add_executable(CompareBf Separator/CompareBf.cpp ${PROJECT_BINARY_DIR}/IonVersion.cpp)
add_dependencies(CompareBf IONVERSION)
target_link_libraries(CompareBf ion-analysis pthread dl)

## Standalone BaseCaller
add_executable(BaseCaller 
    BaseCaller/BaseCaller.cpp
    BaseCaller/BaseCallerFilters.cpp
    BaseCaller/PerBaseQual.cpp
    BaseCaller/PhaseEstimator.cpp
    BaseCaller/BaseCallerMetricSaver.cpp
    BaseCaller/TreephaserSSE.cpp
    BaseCaller/BarcodeClassifier.cpp
    BaseCaller/BarcodeDatasets.cpp
    BaseCaller/OrderedDatasetWriter.cpp
    BaseCaller/BaseCallerRecalibration.cpp
    BaseCaller/RecalibrationModel.cpp
    ${PROJECT_BINARY_DIR}/IonVersion.cpp)
add_dependencies(BaseCaller IONVERSION bamtools)
target_link_libraries(BaseCaller ion-analysis pthread ${ION_BAMTOOLS_LIBS} dl)
install(TARGETS BaseCaller DESTINATION bin)


## Standalone Variant Caller, named tvc
set(ION_VCFLIB_DIR ${ION_TS_EXTERNAL}/vcflib)
set(ION_FREEBAYES_DIR ${ION_TS_EXTERNAL}/freebayes/src)
include_directories(${ION_VCFLIB_DIR} ${ION_FREEBAYES_DIR})
include_directories("${PROJECT_SOURCE_DIR}/VariantCaller")
include_directories("${PROJECT_SOURCE_DIR}/VariantCaller/FlowDistEval")
include_directories("${PROJECT_SOURCE_DIR}/VariantCaller/EnsembleEval")
include_directories("${PROJECT_SOURCE_DIR}/VariantCaller/Bookkeeping")
include_directories("${PROJECT_SOURCE_DIR}/VariantCaller/Reads")
include_directories("${PROJECT_SOURCE_DIR}/VariantCaller/Splice")
include_directories("${PROJECT_SOURCE_DIR}/VariantCaller/Filter")
include_directories("${PROJECT_SOURCE_DIR}/realignment")

add_executable(tvc
  VariantCaller/VariantCaller.cpp
  VariantCaller/BAMWalkerEngine.cpp
  VariantCaller/SampleManager.cpp
  VariantCaller/TargetsManager.cpp
  VariantCaller/HandleVariant.cpp
  VariantCaller/HotspotReader.cpp
  VariantCaller/MetricsManager.cpp

  VariantCaller/Bookkeeping/MiscUtil.cpp
  VariantCaller/Bookkeeping/ExtendParameters.cpp 
  VariantCaller/Bookkeeping/InputStructures.cpp
  VariantCaller/Bookkeeping/VcfFormat.cpp

  VariantCaller/Reads/ExtendedReadInfo.cpp

  VariantCaller/Splice/ErrorMotifs.cpp
  VariantCaller/Splice/LocalContext.cpp
  VariantCaller/Splice/ClassifyVariant.cpp
  VariantCaller/Splice/ErrorMotifs.cpp
  VariantCaller/Splice/SpliceVariantHypotheses.cpp

  VariantCaller/Filter/DecisionTreeData.cpp
  VariantCaller/Filter/VariantAssist.cpp

  VariantCaller/HypothesisEvaluator.cpp

  VariantCaller/EnsembleEval/DiagnosticJSON.cpp
  VariantCaller/EnsembleEval/BiasGenerator.cpp
  VariantCaller/EnsembleEval/SigmaGenerator.cpp
  VariantCaller/EnsembleEval/SkewGenerator.cpp
  VariantCaller/EnsembleEval/PosteriorInference.cpp
  VariantCaller/EnsembleEval/ShortStack.cpp
  VariantCaller/EnsembleEval/StackEngine.cpp
  VariantCaller/EnsembleEval/CrossHypotheses.cpp

  # TODO: Actually build vcflib as a static library and link to variant caller.
  # TODO2: Resolve bgzf.c collisions between vcflib and bamtools
  ${ION_VCFLIB_DIR}/Variant.cpp
  ${ION_VCFLIB_DIR}/split.cpp
  ${ION_VCFLIB_DIR}/tabixpp/tabix.cpp
  ${ION_VCFLIB_DIR}/tabixpp/index.c
  ${ION_VCFLIB_DIR}/tabixpp/bgzf.c
  ${ION_VCFLIB_DIR}/smithwaterman/LeftAlign.cpp
  ${ION_VCFLIB_DIR}/smithwaterman/Repeats.cpp
  ${ION_VCFLIB_DIR}/smithwaterman/IndelAllele.cpp
  ${ION_VCFLIB_DIR}/smithwaterman/SmithWatermanGotoh.cpp
  ${ION_FREEBAYES_DIR}/AlleleParser.cpp

  BaseCaller/PIDloop.cpp
  BaseCaller/DPTreephaser.cpp
  BaseCaller/TreephaserSSE.cpp
  BaseCaller/RecalibrationModel.cpp
  Util/OptArgs.cpp
  realignment/Realigner.cpp
  ${ION_TS_EXTERNAL}/jsoncpp-src-amalgated0.6.0-rc1/jsoncpp.cpp
  ${PROJECT_BINARY_DIR}/IonVersion.cpp
)
target_link_libraries(tvc ${ION_BAMTOOLS_LIBS} ${ION_ARMADILLO_LIBS} ${EXTRA_LIBS} ${LUCID_EXTRA_LIB} z file-io pthread)
add_dependencies(tvc levmar IONVERSION bamtools armadillo_proj )
install(TARGETS tvc DESTINATION bin)


add_executable(tvcvalidator
  VariantCaller/validator/tvcvalidator.cpp
  ${ION_VCFLIB_DIR}/Variant.cpp
  ${ION_VCFLIB_DIR}/split.cpp
  ${ION_VCFLIB_DIR}/tabixpp/tabix.cpp
  ${ION_VCFLIB_DIR}/tabixpp/index.c
  ${ION_VCFLIB_DIR}/tabixpp/bgzf.c
  ${ION_VCFLIB_DIR}/smithwaterman/LeftAlign.cpp
  ${ION_VCFLIB_DIR}/smithwaterman/Repeats.cpp
  ${ION_VCFLIB_DIR}/smithwaterman/IndelAllele.cpp
  ${ION_VCFLIB_DIR}/smithwaterman/SmithWatermanGotoh.cpp
)
target_link_libraries(tvcvalidator ${ION_BAMTOOLS_LIBS} z ion-analysis pthread dl)
add_dependencies(tvcvalidator IONVERSION bamtools)

add_executable(tvcutils
  VariantCaller/tvcutils/tvcutils.cpp
  VariantCaller/tvcutils/prepare_hotspots.cpp
  VariantCaller/tvcutils/validate_bed.cpp
  Util/OptArgs.cpp
  ${ION_TS_EXTERNAL}/jsoncpp-src-amalgated0.6.0-rc1/jsoncpp.cpp
  ${PROJECT_BINARY_DIR}/IonVersion.cpp
  Util/Utils.cpp
  Image/ChipIdDecoder.cpp
)
#target_link_libraries(tvcutils ion-analysis)
add_dependencies(tvcutils IONVERSION)
install(TARGETS tvcutils DESTINATION bin)


# Use local source to build tabix and bgzip. In the future just fetch latest tabix package
add_executable(tabix
  ${ION_VCFLIB_DIR}/tabixpp/main.c
  ${ION_VCFLIB_DIR}/tabixpp/bgzf.c
  ${ION_VCFLIB_DIR}/tabixpp/kstring.c
  ${ION_VCFLIB_DIR}/tabixpp/knetfile.c
  ${ION_VCFLIB_DIR}/tabixpp/index.c
  ${ION_VCFLIB_DIR}/tabixpp/bedidx.c)
target_link_libraries(tabix z)
install(TARGETS tabix DESTINATION bin)

add_executable(bgzip
  ${ION_VCFLIB_DIR}/tabixpp/bgzip.c
  ${ION_VCFLIB_DIR}/tabixpp/bgzf.c
  ${ION_VCFLIB_DIR}/tabixpp/knetfile.c)
target_link_libraries(bgzip z)
install(TARGETS bgzip DESTINATION bin)




add_executable(ionstats 
    ionstats/ionstats.cpp
    ionstats/ionstats_data.cpp
    ionstats/ionstats_basecaller.cpp
    ionstats/ionstats_alignment.cpp
    ionstats/ionstats_tf.cpp
    ${PROJECT_BINARY_DIR}/IonVersion.cpp)
add_dependencies(ionstats IONVERSION bamtools)
target_link_libraries(ionstats ion-analysis ${ION_BAMTOOLS_LIBS} pthread dl)
install(TARGETS ionstats DESTINATION bin)

## calibrate - flowspace recalibration training in c++
add_executable(calibrate Recall/calibrate.cpp ${PROJECT_BINARY_DIR}/IonVersion.cpp)
add_dependencies(calibrate IONVERSION bamtools)
target_link_libraries(calibrate ion-analysis ${ION_BAMTOOLS_LIBS} pthread dl)
install(TARGETS calibrate DESTINATION bin)

add_executable(bamrealignment
    realignment/bamrealignment.cpp
    realignment/Realigner.h
    realignment/Realigner.cpp
    Util/Utils.cpp
    Util/OptArgs.cpp
    ${PROJECT_BINARY_DIR}/IonVersion.cpp
    Image/ChipIdDecoder.cpp
    )
target_link_libraries(bamrealignment ${ION_BAMTOOLS_LIBS} z pthread)
add_dependencies(bamrealignment bamtools)
install(TARGETS bamrealignment DESTINATION bin)


add_executable(PairedEndErrorCorrection
   ${PROJECT_BINARY_DIR}/IonVersion.cpp
   SFFCorrection/Alignment.cpp
   SFFCorrection/Cell.cpp
   SFFCorrection/semaphore.cpp
   SFFCorrection/Sequence.cpp
   SFFCorrection/sffCorrection.cpp
   SFFCorrection/SmithWaterman.cpp)
add_dependencies(PairedEndErrorCorrection IONVERSION)
target_link_libraries(PairedEndErrorCorrection ion-analysis file-io pthread ${ION_BAMTOOLS_LIBS} dl)
install(TARGETS PairedEndErrorCorrection DESTINATION bin)

IF( ION_BUILD_STRAND_BIAS )
add_custom_command( 
 TARGET PairedEndErrorCorrection POST_BUILD
 #COMMAND mkdir -p ${CMAKE_BUILD_TOOL} ${PROJECT_SOURCE_DIR}/../external/samita/build 
 COMMAND ${CMAKE_COMMAND} ${PROJECT_SOURCE_DIR}/../external/samita 
 COMMAND ${CMAKE_BUILD_TOOL} ${PROJECT_SOURCE_DIR}/../external/samita/ 
 COMMAND "make"
 WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}/../external/samita/ 
 )
 
 include_directories (${ION_TS_EXTERNAL}/samita ${ION_TS_EXTERNAL}/common/c++/lifetech)
 link_directories ( ${ION_TS_EXTERNAL}/samita/ ${Boost_LIBRARY_DIRS} )
 add_executable (strandBiasExtractor strandBiasExtractor/semaphore.cpp  strandBiasExtractor/strandBiasExtractor.cpp)
 add_dependencies(strandBiasExtractor IONVERSION samita )
 target_link_libraries (strandBiasExtractor samita++.a boost_regex boost_iostreams boost_thread boost_filesystem boost_system ${ION_SAMTOOLS_LIBS} ${ION_HDF5_HL_LIBS} ${ION_HDF5_LIBS} log4cxx pthread )
 install(TARGETS strandBiasExtractor DESTINATION bin)
ENDIF(ION_BUILD_STRAND_BIAS )

# add_executable(WellsTimer WellsTimer.cpp ${PROJECT_BINARY_DIR}/IonVersion.cpp)
# add_dependencies(WellsTimer IONVERSION)
# target_link_libraries(WellsTimer ion-analysis pthread)
# install(TARGETS WellsTimer DESTINATION bin)

add_executable(Recall
	Recall/Recall.cpp
	${PROJECT_BINARY_DIR}/IonVersion.cpp)
target_link_libraries(Recall ion-analysis file-io dl)
install(TARGETS Recall DESTINATION bin)

add_executable(SeqBoost
        Recall/SeqBoost.cpp
        ${PROJECT_BINARY_DIR}/IonVersion.cpp)
target_link_libraries(SeqBoost ion-analysis file-io ${ION_BAMTOOLS_LIBS} pthread dl)
install(TARGETS SeqBoost DESTINATION bin)

add_executable(sff2bam
        Converter/sff2bam.cpp
        ${PROJECT_BINARY_DIR}/IonVersion.cpp)
target_link_libraries(sff2bam ion-analysis file-io ${ION_BAMTOOLS_LIBS} pthread dl)
install(TARGETS sff2bam DESTINATION bin)

add_executable(bam2sff
        Converter/bam2sff.cpp
        ${PROJECT_BINARY_DIR}/IonVersion.cpp)
target_link_libraries(bam2sff ion-analysis file-io  ${ION_BAMTOOLS_LIBS} pthread dl)
install(TARGETS bam2sff DESTINATION bin)

add_executable(SamVsSam
        SamUtils/SamVsSam.cpp
)
target_link_libraries(SamVsSam ion-analysis ${ION_SAMTOOLS_LIBS} pthread dl)
install(TARGETS SamVsSam DESTINATION bin)

add_executable(BeadmaskParse Mask/BeadmaskParse.cpp ${PROJECT_BINARY_DIR}/IonVersion.cpp)
add_dependencies(BeadmaskParse IONVERSION)
target_link_libraries(BeadmaskParse ion-analysis pthread dl)
install(TARGETS BeadmaskParse DESTINATION bin)

add_executable(BeadmaskMerge Mask/BeadmaskMerge.cpp ${PROJECT_BINARY_DIR}/IonVersion.cpp)
add_dependencies(BeadmaskMerge IONVERSION)
target_link_libraries(BeadmaskMerge ion-analysis pthread dl)
install(TARGETS BeadmaskMerge DESTINATION bin)

add_executable(MergeWells Wells/MergeWells.cpp ${PROJECT_BINARY_DIR}/IonVersion.cpp)
add_dependencies(MergeWells IONVERSION)
target_link_libraries(MergeWells ion-analysis pthread dl)
install(TARGETS MergeWells DESTINATION bin)

add_executable(RawWellsCombine Wells/RawWellsCombine.cpp ${PROJECT_BINARY_DIR}/IonVersion.cpp)
add_dependencies(RawWellsCombine IONVERSION)
target_link_libraries(RawWellsCombine ion-analysis pthread dl)
install(TARGETS RawWellsCombine DESTINATION bin)

include_directories("${PROJECT_SOURCE_DIR}/file-io")
add_library(file-io
        file-io/dat_chip.c
        file-io/dat_flow.c
        file-io/dat_frame.c
        file-io/dat_header.c
        file-io/dat_io.c
        file-io/fastq.c
        file-io/fastq_file.c
        file-io/ion_alloc.c
        file-io/ion_error.c
        file-io/ion_string.c
        file-io/ion_util.c
        file-io/sff.c
        file-io/sff_file.c
        file-io/sff_header.c
        file-io/sff_index.c
        file-io/sff_iter.c
        file-io/sff_read.c
        file-io/sff_read_header.c
        file-io/sff_sort.c
        file-io/wells_chip.c
        file-io/wells_combine.c
        file-io/wells_data.c
        file-io/wells_header.c
        file-io/wells_mask.c
        file-io/wells_mask_combine.c
)
if( CMAKE_SYSTEM_PROCESSOR STREQUAL "x86_64" )
        set_target_properties(file-io PROPERTIES COMPILE_FLAGS "-fPIC")
endif( CMAKE_SYSTEM_PROCESSOR STREQUAL "x86_64" )

add_executable(alignStats
        SamUtils/alignStats_driver.cpp
        ${PROJECT_BINARY_DIR}/IonVersion.cpp
)
target_link_libraries(alignStats ion-analysis z ${ION_SAMTOOLS_LIBS} pthread dl)
add_dependencies(alignStats IONVERSION)
install(TARGETS alignStats DESTINATION bin)

add_executable(FlowErrTest
        SamUtils/FlowErrTest.cpp
)
target_link_libraries(FlowErrTest ion-analysis z ${ION_SAMTOOLS_LIBS} pthread dl)

add_executable(SFFRead SFFUtils/SFFRead.cpp ${PROJECT_BINARY_DIR}/IonVersion.cpp)
add_dependencies(SFFRead IONVERSION)
target_link_libraries(SFFRead ion-analysis pthread dl)
install(TARGETS SFFRead DESTINATION bin)

add_executable(SFFRandom SFFUtils/SFFRandom.cpp ${PROJECT_BINARY_DIR}/IonVersion.cpp)
add_dependencies(SFFRandom IONVERSION)
target_link_libraries(SFFRandom ion-analysis pthread dl)
install(TARGETS SFFRandom DESTINATION bin)

add_executable(RawWellsEquivalent Wells/RawWellsEquivalent.cpp ${PROJECT_BINARY_DIR}/IonVersion.cpp)
add_dependencies(RawWellsEquivalent IONVERSION)
target_link_libraries(RawWellsEquivalent ion-analysis pthread dl)
install(TARGETS RawWellsEquivalent DESTINATION bin)

# add_executable(DiffSeparator Separator/DiffSeparator.cpp ${PROJECT_BINARY_DIR}/IonVersion.cpp)
# add_dependencies(DiffSeparator IONVERSION)
# target_link_libraries(DiffSeparator ion-analysis pthread ${ION_ARMADILLO_LIBS} dl)
# install(TARGETS DiffSeparator DESTINATION bin)

add_executable(SeparatorCmp Separator/SeparatorCmp.cpp ${PROJECT_BINARY_DIR}/IonVersion.cpp)
add_dependencies(SeparatorCmp IONVERSION)
target_link_libraries(SeparatorCmp ion-analysis pthread ${ION_ARMADILLO_LIBS} dl)

add_executable(CompressDeviation Separator/CompressDeviation.cpp ${PROJECT_BINARY_DIR}/IonVersion.cpp)
add_dependencies(CompressDeviation IONVERSION)
target_link_libraries(CompressDeviation ion-analysis pthread ${ION_ARMADILLO_LIBS} dl)

add_executable(DumpSynchDat SynchDat/DumpSynchDat.cpp ${PROJECT_BINARY_DIR}/IonVersion.cpp)
add_dependencies(DumpSynchDat IONVERSION)
target_link_libraries(DumpSynchDat ion-analysis pthread ${ION_ARMADILLO_LIBS} dl)

add_executable(GrindSynchDat SynchDat/GrindSynchDat.cpp ${PROJECT_BINARY_DIR}/IonVersion.cpp)
add_dependencies(GrindSynchDat IONVERSION)
target_link_libraries(GrindSynchDat ion-analysis pthread ${ION_ARMADILLO_LIBS} dl)


add_executable(TraceDriver SynchDat/TraceDriver.cpp ${PROJECT_BINARY_DIR}/IonVersion.cpp)
add_dependencies(TraceDriver IONVERSION)
target_link_libraries(TraceDriver ion-analysis pthread dl)

add_executable(NormWells NormWells/NormWells.cpp ${PROJECT_BINARY_DIR}/IonVersion.cpp)
add_dependencies(NormWells IONVERSION)
target_link_libraries(NormWells ion-analysis pthread dl)

add_executable(ExtractWells NormWells/ExtractWells.cpp ${PROJECT_BINARY_DIR}/IonVersion.cpp)
add_dependencies(ExtractWells IONVERSION)
target_link_libraries(ExtractWells ion-analysis pthread dl)

# add_executable(VFCTest SynchDat/VFCTest.cpp ${PROJECT_BINARY_DIR}/IonVersion.cpp)
# add_dependencies(VFCTest IONVERSION)
# target_link_libraries(VFCTest ion-analysis pthread profiler)


# add_executable(ImageT0 ImageT0.cpp ${PROJECT_BINARY_DIR}/IonVersion.cpp)
# add_dependencies(ImageT0 IONVERSION)
# target_link_libraries(ImageT0 ion-analysis pthread profiler)
# install(TARGETS ImageT0 DESTINATION bin)

#add_executable(PinnedWell PinnedWell.cpp ${PROJECT_BINARY_DIR}/IonVersion.cpp)
#add_dependencies(PinnedWell IONVERSION)
#target_link_libraries(PinnedWell ion-analysis  pthread dl)
#install(TARGETS PinnedWell DESTINATION bin)

add_executable(readDat readDat.cpp ${PROJECT_BINARY_DIR}/IonVersion.cpp)
add_dependencies(readDat IONVERSION)
#target_link_libraries(readDat ion-analysis pthread)
target_link_libraries(readDat ion-analysis ${GTEST_BOTH_LIBRARIES} pthread dl)
install(TARGETS readDat DESTINATION bin)

add_executable(readWells Wells/readWells.cpp ${PROJECT_BINARY_DIR}/IonVersion.cpp)
add_dependencies(readWells IONVERSION)
target_link_libraries(readWells ion-analysis pthread dl)
install(TARGETS readWells DESTINATION bin)

add_executable(iontools file-io/main.c file-io/sff_check.c ${PROJECT_BINARY_DIR}/IonVersion.cpp)
add_dependencies(iontools IONVERSION)
target_link_libraries(iontools ion-analysis file-io pthread dl)
install(TARGETS iontools DESTINATION bin)

add_executable(barcodeMaskParse Mask/barcodeMaskParse.cpp ${PROJECT_BINARY_DIR}/IonVersion.cpp)
target_link_libraries(barcodeMaskParse ion-analysis dl)
install(TARGETS barcodeMaskParse DESTINATION bin)

add_executable(BamDuplicates
        SamUtils/bamduplicates.cpp
       ${PROJECT_BINARY_DIR}/IonVersion.cpp
)
add_dependencies(BamDuplicates IONVERSION)
target_link_libraries( BamDuplicates ${ION_BAMTOOLS_LIBS} ion-analysis z pthread )
install( TARGETS BamDuplicates DESTINATION bin )

add_executable(seqCoverage coverage/seqCoverage.cpp coverage/interval_tree.cpp)
add_dependencies(seqCoverage IONVERSION)
install(TARGETS seqCoverage DESTINATION bin)

# Setup for testing and gtest in particular, only needed once in file before tests.
enable_testing()
find_package(GTest QUIET)
if(GTEST_FOUND)
  
# Copy over test data...
   configure_file (
     "utest/reference.txt"
     "${CMAKE_CURRENT_BINARY_DIR}/reference.txt"
     COPYONLY
    )
   configure_file (
     "utest/traces.txt"
     "${CMAKE_CURRENT_BINARY_DIR}/traces.txt"
      COPYONLY
   )
   # configure_file (
   #   "utest/1.wells"
   #   "${CMAKE_CURRENT_BINARY_DIR}/1.wells"
   # )
   configure_file (
     "utest/reference.txt"
     "${CMAKE_CURRENT_BINARY_DIR}/reference.txt"
     COPYONLY
   )

        configure_file (
          "utest/comp_clean_test_data.txt"
          "${CMAKE_CURRENT_BINARY_DIR}/comp_clean_test_data.txt"
          COPYONLY
        )

        configure_file (
          "utest/comp_clean_test_ev_3.txt"
          "${CMAKE_CURRENT_BINARY_DIR}/comp_clean_test_ev_3.txt"
          COPYONLY
        )

        add_executable(ComparatorClean_Test utest/ComparatorClean_Test.cpp)
        target_link_libraries(ComparatorClean_Test ion-analysis ${GTEST_BOTH_LIBRARIES} pthread)
        add_test(ComparatorCleanTest ComparatorClean_Test --gtest_output=xml:./)

        add_executable(IonErr_Test utest/IonErr_Test.cpp)
        target_link_libraries(IonErr_Test ion-analysis ${GTEST_BOTH_LIBRARIES} pthread)
        add_test(IonErrTest IonErr_Test --gtest_output=xml:./)

        add_executable(Mask_Test utest/Mask_Test.cpp)
        target_link_libraries(Mask_Test ion-analysis ${GTEST_BOTH_LIBRARIES} pthread)
        add_test(MaskTest Mask_Test --gtest_output=xml:./)

        add_executable(Utils_Test utest/Utils_Test.cpp)
        target_link_libraries(Utils_Test ion-analysis ${GTEST_BOTH_LIBRARIES} pthread)
        add_test(MaskTest Utils_Test --gtest_output=xml:./)

        # add_executable(Wells_Test utest/Wells_Test.cpp)
        # target_link_libraries(Wells_Test ion-analysis ${ION_HDF5_LIBS} ${GTEST_BOTH_LIBRARIES} pthread z)
        # add_test(WellsTest Wells_Test --gtest_output=xml:./)

        add_executable(DualGaussMixModel_Test utest/DualGaussMixModel_Test.cpp)
        target_link_libraries(DualGaussMixModel_Test ion-analysis ${GTEST_BOTH_LIBRARIES} pthread)
        add_test(DualGaussMixModelTest DualGaussMixModel_Test --gtest_output=xml:./)

        # add_executable(ZeromerDiff_Test utest/ZeromerDiff_Test.cpp)
        # target_link_libraries(ZeromerDiff_Test ion-analysis ${GTEST_BOTH_LIBRARIES}  )
        # add_test(ZeromerDiffTest ZeromerDiff_Test --gtest_output=xml:./)

        add_executable(FindSlopeChange_Test utest/FindSlopeChange_Test.cpp)
        target_link_libraries(FindSlopeChange_Test ion-analysis ${GTEST_BOTH_LIBRARIES} blas pthread )
#        add_test(FindSlopeChangeTest FindSlopeChange_Test --gtest_output=xml:./)

        add_executable(T0Model_Test utest/T0Model_Test.cpp)
        target_link_libraries(T0Model_Test ion-analysis ${GTEST_BOTH_LIBRARIES} blas pthread)
        add_test(T0ModelTest T0Model_Test --gtest_output=xml:./)

        # add_executable(KeyClassifier_Test utest/KeyClassifier_Test.cpp)
        # target_link_libraries(KeyClassifier_Test ion-analysis ${GTEST_BOTH_LIBRARIES}  )
        # add_test(KeyClassifierTest KeyClassifier_Test --gtest_output=xml:./)

        add_executable(NumericalComparison_Test utest/NumericalComparison_Test.cpp)
        target_link_libraries(NumericalComparison_Test ion-analysis ${GTEST_BOTH_LIBRARIES} pthread)
        add_test(NumericalComparisonTest NumericalComparison_Test --gtest_output=xml:./)

        add_executable(OptArgs_Test utest/OptArgs_Test.cpp)
        target_link_libraries(OptArgs_Test ion-analysis ${GTEST_BOTH_LIBRARIES} pthread)
        add_test(OptArgsTest OptArgs_Test --gtest_output=xml:./)

        add_executable(H5File_Test utest/H5File_Test.cpp)
        target_link_libraries(H5File_Test ion-analysis ${GTEST_BOTH_LIBRARIES} pthread)
        #add_test(H5FileTest H5File_Test --gtest_output=xml:./)

        add_executable(OptionArgs_Test utest/OptionArgs_Test.cpp)
        target_link_libraries(OptionArgs_Test ion-analysis ${GTEST_BOTH_LIBRARIES} pthread)
        add_test(OptionArgsTest OptionArgs_Test --gtest_output=xml:./)

        add_executable(BitHandler_Test utest/BitHandler_Test.cpp)
        target_link_libraries(BitHandler_Test ion-analysis ${GTEST_BOTH_LIBRARIES} pthread)
        add_test(BitHandlerTest BitHandler_Test --gtest_output=xml:./)

endif()


#files used for configuration
#not actually source files at all
install(FILES "${PROJECT_SOURCE_DIR}/config/DefaultTFs.conf" DESTINATION ${ION_INSTALL_PREFIX}/config RENAME "DefaultTFs.conf.dist")
#
#
# exclusion masks by chip name
install(FILES "${PROJECT_SOURCE_DIR}/config/exclusionMask_314.bin" DESTINATION ${ION_INSTALL_PREFIX}/config)
install(FILES "${PROJECT_SOURCE_DIR}/config/exclusionMask_316.bin" DESTINATION ${ION_INSTALL_PREFIX}/config)
install(FILES "${PROJECT_SOURCE_DIR}/config/exclusionMask_316v2.bin" DESTINATION ${ION_INSTALL_PREFIX}/config)
install(FILES "${PROJECT_SOURCE_DIR}/config/exclusionMask_318.bin" DESTINATION ${ION_INSTALL_PREFIX}/config)
install(FILES "${PROJECT_SOURCE_DIR}/config/exclusionMask_324.bin" DESTINATION ${ION_INSTALL_PREFIX}/config)
install(FILES "${PROJECT_SOURCE_DIR}/config/exclusionMask_P1_1.txt" DESTINATION ${ION_INSTALL_PREFIX}/config)
install(FILES "${PROJECT_SOURCE_DIR}/config/exclusionMask_P1_0.txt" DESTINATION ${ION_INSTALL_PREFIX}/config)
install(FILES "${PROJECT_SOURCE_DIR}/config/excludeMask_314" DESTINATION ${ION_INSTALL_PREFIX}/config)
install(FILES "${PROJECT_SOURCE_DIR}/config/excludeMask_316" DESTINATION ${ION_INSTALL_PREFIX}/config)
install(FILES "${PROJECT_SOURCE_DIR}/config/excludeMask_318" DESTINATION ${ION_INSTALL_PREFIX}/config)
install(FILES "${PROJECT_SOURCE_DIR}/config/excludeMask_324" DESTINATION ${ION_INSTALL_PREFIX}/config)
#
# phredtables by chip name
install(FILES "${PROJECT_SOURCE_DIR}/config/phredTable.314" DESTINATION ${ION_INSTALL_PREFIX}/config)
install(FILES "${PROJECT_SOURCE_DIR}/config/phredTable.314.h5" DESTINATION ${ION_INSTALL_PREFIX}/config)
install(FILES "${PROJECT_SOURCE_DIR}/config/phredTable.314.Recal" DESTINATION ${ION_INSTALL_PREFIX}/config)
install(FILES "${PROJECT_SOURCE_DIR}/config/phredTable.314.Recal.h5" DESTINATION ${ION_INSTALL_PREFIX}/config)
install(FILES "${PROJECT_SOURCE_DIR}/config/phredTable.316" DESTINATION ${ION_INSTALL_PREFIX}/config)
install(FILES "${PROJECT_SOURCE_DIR}/config/phredTable.316.h5" DESTINATION ${ION_INSTALL_PREFIX}/config)
install(FILES "${PROJECT_SOURCE_DIR}/config/phredTable.316.Recal" DESTINATION ${ION_INSTALL_PREFIX}/config)
install(FILES "${PROJECT_SOURCE_DIR}/config/phredTable.316.Recal.h5" DESTINATION ${ION_INSTALL_PREFIX}/config)
install(FILES "${PROJECT_SOURCE_DIR}/config/phredTable.316v2" DESTINATION ${ION_INSTALL_PREFIX}/config)
install(FILES "${PROJECT_SOURCE_DIR}/config/phredTable.316v2.h5" DESTINATION ${ION_INSTALL_PREFIX}/config)
install(FILES "${PROJECT_SOURCE_DIR}/config/phredTable.316v2.Recal" DESTINATION ${ION_INSTALL_PREFIX}/config)
install(FILES "${PROJECT_SOURCE_DIR}/config/phredTable.316v2.Recal.h5" DESTINATION ${ION_INSTALL_PREFIX}/config)
install(FILES "${PROJECT_SOURCE_DIR}/config/phredTable.318" DESTINATION ${ION_INSTALL_PREFIX}/config)
install(FILES "${PROJECT_SOURCE_DIR}/config/phredTable.318.h5" DESTINATION ${ION_INSTALL_PREFIX}/config)
install(FILES "${PROJECT_SOURCE_DIR}/config/phredTable.318.Recal" DESTINATION ${ION_INSTALL_PREFIX}/config)
install(FILES "${PROJECT_SOURCE_DIR}/config/phredTable.318.Recal.h5" DESTINATION ${ION_INSTALL_PREFIX}/config)

install(FILES "${PROJECT_SOURCE_DIR}/config/phredTable.314.PSP4.h5" DESTINATION ${ION_INSTALL_PREFIX}/config)
install(FILES "${PROJECT_SOURCE_DIR}/config/phredTable.314.PSP4.Recal.h5" DESTINATION ${ION_INSTALL_PREFIX}/config)
install(FILES "${PROJECT_SOURCE_DIR}/config/phredTable.316.PSP4.h5" DESTINATION ${ION_INSTALL_PREFIX}/config)
install(FILES "${PROJECT_SOURCE_DIR}/config/phredTable.316.PSP4.Recal.h5" DESTINATION ${ION_INSTALL_PREFIX}/config)
install(FILES "${PROJECT_SOURCE_DIR}/config/phredTable.316v2.PSP4.h5" DESTINATION ${ION_INSTALL_PREFIX}/config)
install(FILES "${PROJECT_SOURCE_DIR}/config/phredTable.316v2.PSP4.Recal.h5" DESTINATION ${ION_INSTALL_PREFIX}/config)
install(FILES "${PROJECT_SOURCE_DIR}/config/phredTable.318.PSP4.h5" DESTINATION ${ION_INSTALL_PREFIX}/config)
install(FILES "${PROJECT_SOURCE_DIR}/config/phredTable.318.PSP4.Recal.h5" DESTINATION ${ION_INSTALL_PREFIX}/config)

install(FILES "${PROJECT_SOURCE_DIR}/config/phredTable.314.B5.h5" DESTINATION ${ION_INSTALL_PREFIX}/config)
install(FILES "${PROJECT_SOURCE_DIR}/config/phredTable.314.B5.Recal.h5" DESTINATION ${ION_INSTALL_PREFIX}/config)
install(FILES "${PROJECT_SOURCE_DIR}/config/phredTable.316.B5.h5" DESTINATION ${ION_INSTALL_PREFIX}/config)
install(FILES "${PROJECT_SOURCE_DIR}/config/phredTable.316.B5.Recal.h5" DESTINATION ${ION_INSTALL_PREFIX}/config)
install(FILES "${PROJECT_SOURCE_DIR}/config/phredTable.316v2.B5.h5" DESTINATION ${ION_INSTALL_PREFIX}/config)
install(FILES "${PROJECT_SOURCE_DIR}/config/phredTable.316v2.B5.Recal.h5" DESTINATION ${ION_INSTALL_PREFIX}/config)
install(FILES "${PROJECT_SOURCE_DIR}/config/phredTable.318.B5.h5" DESTINATION ${ION_INSTALL_PREFIX}/config)
install(FILES "${PROJECT_SOURCE_DIR}/config/phredTable.318.B5.Recal.h5" DESTINATION ${ION_INSTALL_PREFIX}/config)

install(FILES "${PROJECT_SOURCE_DIR}/config/phredTable.900" DESTINATION ${ION_INSTALL_PREFIX}/config)
install(FILES "${PROJECT_SOURCE_DIR}/config/phredTable.900.h5" DESTINATION ${ION_INSTALL_PREFIX}/config)
install(FILES "${PROJECT_SOURCE_DIR}/config/phredTable.900.Recal" DESTINATION ${ION_INSTALL_PREFIX}/config)
install(FILES "${PROJECT_SOURCE_DIR}/config/phredTable.900.Recal.h5" DESTINATION ${ION_INSTALL_PREFIX}/config)

install(FILES "${PROJECT_SOURCE_DIR}/config/phredTable.p1.0.19" DESTINATION ${ION_INSTALL_PREFIX}/config)
install(FILES "${PROJECT_SOURCE_DIR}/config/phredTable.p1.0.19.h5" DESTINATION ${ION_INSTALL_PREFIX}/config)
install(FILES "${PROJECT_SOURCE_DIR}/config/phredTable.p1.0.19.Recal" DESTINATION ${ION_INSTALL_PREFIX}/config)
install(FILES "${PROJECT_SOURCE_DIR}/config/phredTable.p1.0.19.Recal.h5" DESTINATION ${ION_INSTALL_PREFIX}/config)
install(FILES "${PROJECT_SOURCE_DIR}/config/phredTable.p1.0.20" DESTINATION ${ION_INSTALL_PREFIX}/config)
install(FILES "${PROJECT_SOURCE_DIR}/config/phredTable.p1.0.20.h5" DESTINATION ${ION_INSTALL_PREFIX}/config)
install(FILES "${PROJECT_SOURCE_DIR}/config/phredTable.p1.0.20.Recal" DESTINATION ${ION_INSTALL_PREFIX}/config)
install(FILES "${PROJECT_SOURCE_DIR}/config/phredTable.p1.0.20.Recal.h5" DESTINATION ${ION_INSTALL_PREFIX}/config)
install(FILES "${PROJECT_SOURCE_DIR}/config/phredTable.p1.1.17" DESTINATION ${ION_INSTALL_PREFIX}/config)
install(FILES "${PROJECT_SOURCE_DIR}/config/phredTable.p1.1.17.h5" DESTINATION ${ION_INSTALL_PREFIX}/config)
install(FILES "${PROJECT_SOURCE_DIR}/config/phredTable.p1.1.17.Recal" DESTINATION ${ION_INSTALL_PREFIX}/config)
install(FILES "${PROJECT_SOURCE_DIR}/config/phredTable.p1.1.17.Recal.h5" DESTINATION ${ION_INSTALL_PREFIX}/config)
install(FILES "${PROJECT_SOURCE_DIR}/config/phredTable.p1.1.17_ampliseq_exome" DESTINATION ${ION_INSTALL_PREFIX}/config)
install(FILES "${PROJECT_SOURCE_DIR}/config/phredTable.p1.1.17_ampliseq_exome.h5" DESTINATION ${ION_INSTALL_PREFIX}/config)
install(FILES "${PROJECT_SOURCE_DIR}/config/phredTable.p1.1.17_ampliseq_exome.Recal" DESTINATION ${ION_INSTALL_PREFIX}/config)
install(FILES "${PROJECT_SOURCE_DIR}/config/phredTable.p1.1.17_ampliseq_exome.Recal.h5" DESTINATION ${ION_INSTALL_PREFIX}/config)
install(FILES "${PROJECT_SOURCE_DIR}/config/phredTable.p1.1.17_im1" DESTINATION ${ION_INSTALL_PREFIX}/config)
install(FILES "${PROJECT_SOURCE_DIR}/config/phredTable.p1.1.17_im1.h5" DESTINATION ${ION_INSTALL_PREFIX}/config)
install(FILES "${PROJECT_SOURCE_DIR}/config/phredTable.p1.1.17_im1.Recal" DESTINATION ${ION_INSTALL_PREFIX}/config)
install(FILES "${PROJECT_SOURCE_DIR}/config/phredTable.p1.1.17_im1.Recal.h5" DESTINATION ${ION_INSTALL_PREFIX}/config)
install(FILES "${PROJECT_SOURCE_DIR}/config/phredTable.p1.1.17_im2" DESTINATION ${ION_INSTALL_PREFIX}/config)
install(FILES "${PROJECT_SOURCE_DIR}/config/phredTable.p1.1.17_im2.h5" DESTINATION ${ION_INSTALL_PREFIX}/config)
install(FILES "${PROJECT_SOURCE_DIR}/config/phredTable.p1.1.17_im2.Recal" DESTINATION ${ION_INSTALL_PREFIX}/config)
install(FILES "${PROJECT_SOURCE_DIR}/config/phredTable.p1.1.17_im2.Recal.h5" DESTINATION ${ION_INSTALL_PREFIX}/config)
install(FILES "${PROJECT_SOURCE_DIR}/config/phredTable.p1.2.18" DESTINATION ${ION_INSTALL_PREFIX}/config)
install(FILES "${PROJECT_SOURCE_DIR}/config/phredTable.p1.2.18.h5" DESTINATION ${ION_INSTALL_PREFIX}/config)
install(FILES "${PROJECT_SOURCE_DIR}/config/phredTable.p1.2.18.Recal" DESTINATION ${ION_INSTALL_PREFIX}/config)
install(FILES "${PROJECT_SOURCE_DIR}/config/phredTable.p1.2.18.Recal.h5" DESTINATION ${ION_INSTALL_PREFIX}/config)
install(FILES "${PROJECT_SOURCE_DIR}/config/phredTable.p1.2.18_im2" DESTINATION ${ION_INSTALL_PREFIX}/config)
install(FILES "${PROJECT_SOURCE_DIR}/config/phredTable.p1.2.18_im2.h5" DESTINATION ${ION_INSTALL_PREFIX}/config)
install(FILES "${PROJECT_SOURCE_DIR}/config/phredTable.p1.2.18_im2.Recal" DESTINATION ${ION_INSTALL_PREFIX}/config)
install(FILES "${PROJECT_SOURCE_DIR}/config/phredTable.p1.2.18_im2.Recal.h5" DESTINATION ${ION_INSTALL_PREFIX}/config)
install(FILES "${PROJECT_SOURCE_DIR}/config/phredTable.p2.2.1" DESTINATION ${ION_INSTALL_PREFIX}/config)
install(FILES "${PROJECT_SOURCE_DIR}/config/phredTable.p2.2.1.h5" DESTINATION ${ION_INSTALL_PREFIX}/config)
install(FILES "${PROJECT_SOURCE_DIR}/config/phredTable.p2.2.1.Recal" DESTINATION ${ION_INSTALL_PREFIX}/config)
install(FILES "${PROJECT_SOURCE_DIR}/config/phredTable.p2.2.1.Recal.h5" DESTINATION ${ION_INSTALL_PREFIX}/config)
#
#
#gopt parameters by chip type
#gopt parameters
install(FILES "${PROJECT_SOURCE_DIR}/config/gopt_314v2_Hi-Q.param.json" DESTINATION ${ION_INSTALL_PREFIX}/config)
install(FILES "${PROJECT_SOURCE_DIR}/config/gopt_316v2_Hi-Q.param.json" DESTINATION ${ION_INSTALL_PREFIX}/config)
install(FILES "${PROJECT_SOURCE_DIR}/config/gopt_318v2_Hi-Q.param.json" DESTINATION ${ION_INSTALL_PREFIX}/config)
install(FILES "${PROJECT_SOURCE_DIR}/config/gopt_314.param.json" DESTINATION ${ION_INSTALL_PREFIX}/config)
install(FILES "${PROJECT_SOURCE_DIR}/config/gopt_316.param.json" DESTINATION ${ION_INSTALL_PREFIX}/config)
install(FILES "${PROJECT_SOURCE_DIR}/config/gopt_316v2.param.json" DESTINATION ${ION_INSTALL_PREFIX}/config)
install(FILES "${PROJECT_SOURCE_DIR}/config/gopt_318.param.json" DESTINATION ${ION_INSTALL_PREFIX}/config)
install(FILES "${PROJECT_SOURCE_DIR}/config/gopt_p1.1.17.param.json" DESTINATION ${ION_INSTALL_PREFIX}/config)
install(FILES "${PROJECT_SOURCE_DIR}/config/gopt_p1.0.19.param.json" DESTINATION ${ION_INSTALL_PREFIX}/config)
install(FILES "${PROJECT_SOURCE_DIR}/config/gopt_p1.0.20.param.json" DESTINATION ${ION_INSTALL_PREFIX}/config)
install(FILES "${PROJECT_SOURCE_DIR}/config/gopt_p1.2.18.param.json" DESTINATION ${ION_INSTALL_PREFIX}/config)
install(FILES "${PROJECT_SOURCE_DIR}/config/gopt_p2.2.1.param.json" DESTINATION ${ION_INSTALL_PREFIX}/config)
install(FILES "${PROJECT_SOURCE_DIR}/config/gopt_p1.1.17_ampliseq_exome.param.json" DESTINATION ${ION_INSTALL_PREFIX}/config)
#
#
#
#cross talk configurations by chip type
install(FILES "${PROJECT_SOURCE_DIR}/config/xtalk.p1.2.well.settings.20140102.json" DESTINATION ${ION_INSTALL_PREFIX}/config)
install(FILES "${PROJECT_SOURCE_DIR}/config/xtalk.p2.2.1.settings.20140120.json" DESTINATION ${ION_INSTALL_PREFIX}/config)
install(FILES "${PROJECT_SOURCE_DIR}/config/xtalk.p2.2.1.null.json" DESTINATION ${ION_INSTALL_PREFIX}/config)

install(FILES "${PROJECT_SOURCE_DIR}/Analysis.1" DESTINATION share/man/man1)

if(NOT ION_USE_SYSTEM_ARMADILLO)
   install(FILES "${PROJECT_BINARY_DIR}/../armadillo-4.300.0+ion0-install/lib/libarmadillo.so.4" DESTINATION lib)
   install(FILES "${PROJECT_BINARY_DIR}/../armadillo-4.300.0+ion0-install/lib/libarmadillo.so.4.300.0" DESTINATION lib)
endif()

add_test("trimfastq.pl" "perl" "-cw" "${PROJECT_SOURCE_DIR}/trimfastq.pl")
install(PROGRAMS "${PROJECT_SOURCE_DIR}/trimfastq.pl" DESTINATION bin)
install(PROGRAMS "${PROJECT_SOURCE_DIR}/build_genome_index.pl" DESTINATION bin)
install(PROGRAMS "${PROJECT_SOURCE_DIR}/validate_reference.pl" DESTINATION bin)
install(PROGRAMS "${PROJECT_SOURCE_DIR}/alignmentQC.pl" DESTINATION bin)
install(PROGRAMS "${PROJECT_SOURCE_DIR}/getref" DESTINATION bin)
install(PROGRAMS "${PROJECT_SOURCE_DIR}/updateref.py" DESTINATION bin RENAME updateref)

install(DIRECTORY "${PROJECT_BINARY_DIR}/../picard-1.113/" DESTINATION "/opt/picard/picard-tools-current/")

add_subdirectory(TMAP)

include(../buildTools/cmake/CMakeLists.cpack.txt)
#% nice to automate this
set(CPACK_DEBIAN_PACKAGE_DEPENDS "libatlas3gf-base,
    libblas3gf,
    libc6,
    libgcc1,
    libgfortran3,
    liblapack3gf,
    libstdc++6,
    libgsl0ldbl,
    perl,
    ion-gpu (>=2.5.0)")

set(CPACK_DEBIAN_PACKAGE_BREAKS "ion-gpu (<< 2.9), ion-alignment")
set(CPACK_DEBIAN_PACKAGE_REPLACES "ion-gpu (<< 2.9), ion-alignment")

set(CPACK_PACKAGE_DESCRIPTION "ion-analysis provides the command line workflow and supporting tools to process raw DAT files into SFF and fastq files.")
set(CPACK_DEBIAN_PACKAGE_CONTROL_EXTRA
    ${CMAKE_CURRENT_BINARY_DIR}/debian/postinst
    ${CMAKE_CURRENT_BINARY_DIR}/debian/prerm
)
include(CPack)
